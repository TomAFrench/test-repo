name: Release

# Patch release workflow:
#
# In order to create a patch release for a particular minor version v0.X.0:
# 1. Checkout the tag for the v0.X.0 release and create the `v0.X.x` branch
# 3. Push a "chore" commit to `v0.X.x` adding this branch to the list of branches below.
# 4. Create a pull request into the `v0.X.x` branch with the contents of your patch.
# 5. Once merged, release-please will open a release PR for the patch release.
# 6. Merge this PR into `v0.X.x` to create the release.
#
# At this point the release has been made, however we want to ensure the changelog entries and the patch is included in `master`.
# You should then open a new PR to merge the patch release into `master`. Create a new branch from the release commit
# instead of merging the `v0.X.x` branch directly to avoid the chance of master being merged back into the `v0.X.x` branch.
# We want to keep the `v0.X.x` branch clean to reuse it for future patch releases.
#
# If there are a large number of merge conflicts then you can apply the patch changes separately however you *MUST*
# introduce the changelog entry for the `v0.X.x` release in `master`'s `CHANGELOG.md`

on:
  push:
    branches:
      - master
      - v0.16.x

jobs:
  release-please:
    name: Create Release
    outputs:
      release-pr: ${{ steps.release.outputs.pr }}
      tag-name: ${{ steps.release.outputs.tag_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v3
        with:
          token: ${{ secrets.ACVM_RELEASE_TOKEN }}
          command: manifest
          default-branch: ${{ github.ref_name }}
